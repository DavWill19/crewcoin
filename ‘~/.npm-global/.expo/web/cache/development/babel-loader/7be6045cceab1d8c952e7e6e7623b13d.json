{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { NativeBaseProvider, Center, Text, Box, Heading, Header, Divider, Stack, HStack, VStack, AspectRatio } from 'native-base';\nimport { Ionicons } from '@expo/vector-icons';\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport posts from \"./sample2\";\nimport { useNavigation } from '@react-navigation/native';\nimport { UserContext } from \"./UserContext\";\nimport { Component, useContext, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport * as SecureStore from 'expo-secure-store';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function HistoryScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  function Spinner() {\n    if (isLoading) {\n      return _jsx(Image, {\n        alt: \"spinner\",\n        source: require(\"../assets/images/genericspinner.gif\"),\n        style: {\n          marginTop: \"-34%\",\n          width: '32%',\n          height: '20%',\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          zIndex: 20000000,\n          top: \"49%\",\n          resizeMode: \"contain\"\n        }\n      });\n    } else {\n      return null;\n    }\n  }\n\n  function HistoryList() {\n    var _useContext = useContext(UserContext),\n        value = _useContext.value,\n        setValue = _useContext.setValue;\n\n    var _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        token = _useState4[0],\n        setToken = _useState4[1];\n\n    function getValueFor(key) {\n      var result;\n      return _regeneratorRuntime.async(function getValueFor$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(SecureStore.getItemAsync(key));\n\n            case 2:\n              result = _context.sent;\n\n              if (result) {\n                setToken(result);\n              } else {\n                console.log('No values stored under that key.');\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    getValueFor('token');\n\n    function coin(cost) {\n      if (cost > 1) {\n        return cost + \" Crew Coins\";\n      } else {\n        return cost + \" Crew Coin\";\n      }\n    }\n\n    useEffect(function () {\n      fetch(\"https://crewcoin.herokuapp.com/crewuser/\" + value.portalId, {\n        method: \"GET\",\n        headers: {\n          authorization: \"jwt\",\n          credentials: \"same-origin\",\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          mode: \"cors\"\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        if (res) {\n          var self = res.filter(function (user) {\n            return user.username === value.username;\n          });\n          setValue(self[0]);\n          setIsLoading(false);\n        } else {\n          Alert.alert(\"Error\", \"Please check your internet connection\", [{\n            text: \"OK\",\n            onPress: function onPress() {\n              return console.log(\"OK Pressed\");\n            }\n          }]);\n          setIsLoading(false);\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n\n      if (value.newTransaction) {\n        fetch(\"https://crewcoin.herokuapp.com/crewuser/alert/\" + value._id, {\n          method: \"PUT\",\n          headers: {\n            authorization: \"bearer \" + token,\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            mode: \"cors\"\n          },\n          body: JSON.stringify({\n            \"newStoreItem\": value.newStoreItem,\n            \"newTransaction\": false,\n            \"newAnnouncement\": value.newAnnouncement\n          })\n        }).then(function (res) {\n          return res.json();\n        }).then(function (res) {\n          if (res.success) {\n            setValue(res.crewuser);\n          } else {\n            Alert.alert(\"\" + err, \"Please check internet connection!\", [{\n              text: \"OK\",\n              onPress: function onPress() {\n                return console.log(\"OK Pressed\");\n              }\n            }]);\n          }\n        }).catch(function (err) {\n          Alert.alert(\"Error\", \"Please login again\", [{\n            text: \"OK\",\n            onPress: function onPress() {\n              return console.log(\"OK Pressed\");\n            }\n          }]);\n          navigation.navigate(\"Login\");\n        });\n      }\n    }, []);\n    var history = value.history.sort(function (a, b) {\n      return new Date(b.date) - new Date(a.date);\n    });\n    return history.map(function (posts) {\n      return _jsxs(Box, {\n        shadow: 2,\n        mt: \"2\",\n        mb: \"2\",\n        maxW: \"100%\",\n        rounded: \"lg\",\n        overflow: \"hidden\",\n        borderColor: \"gray.300\",\n        borderWidth: \"1\",\n        _dark: {\n          borderColor: \"gray.900\",\n          backgroundColor: \"gray.900\"\n        },\n        _web: {\n          shadow: 2,\n          borderWidth: 0\n        },\n        _light: {\n          backgroundColor: \"white\"\n        },\n        children: [\"   \", _jsx(Center, {\n          children: _jsxs(Stack, {\n            w: \"350\",\n            p: \"2\",\n            mx: \"3\",\n            space: 3,\n            maxW: \"95%\",\n            children: [_jsx(Stack, {\n              maxW: \"95%\",\n              space: 2,\n              children: _jsxs(Center, {\n                children: [_jsx(Text, {\n                  mt: \"-3\",\n                  color: \"gray.900\",\n                  _dark: {\n                    color: \"warmGray.200\"\n                  },\n                  fontWeight: \"500\",\n                  fontSize: 17,\n                  bold: \"true\",\n                  textAlign: \"center\",\n                  children: posts.action + \" \" + coin(posts.amount) + \" \" + posts.who\n                }), _jsx(Divider, {\n                  color: \"amber.600\"\n                })]\n              })\n            }), _jsx(Stack, {\n              maxW: \"100%\",\n              children: _jsxs(VStack, {\n                width: \"100%\",\n                children: [_jsxs(Center, {\n                  children: [_jsx(Text, {\n                    italic: \"true\",\n                    mt: \"-3\",\n                    color: \"gray.900\",\n                    _dark: {\n                      color: \"warmGray.200\"\n                    },\n                    fontWeight: \"500\",\n                    fontSize: 17,\n                    children: \"Comments:\"\n                  }), _jsxs(Text, {\n                    textAlign: \"center\",\n                    color: \"gray.900\",\n                    _dark: {\n                      color: \"warmGray.200\"\n                    },\n                    fontWeight: \"400\",\n                    fontSize: \"lg\",\n                    italic: \"true\",\n                    bold: \"true\",\n                    children: [\"\\\"\", \"\" + posts.comments, \"\\\"\"]\n                  })]\n                }), _jsx(Divider, {}), _jsx(Center, {\n                  children: _jsxs(HStack, {\n                    children: [_jsx(Image, {\n                      style: styles.coin,\n                      source: require(\"../assets/images/coinIcon2.gif\")\n                    }), _jsxs(Heading, {\n                      mt: \"2\",\n                      color: \"yellow.600\",\n                      _dark: {\n                        color: \"warmGray.200\"\n                      },\n                      fontWeight: \"600\",\n                      fontSize: \"md\",\n                      children: [\"Posted: \", moment(posts.date).format(\"MM/DD/YYYY h:mma\")]\n                    })]\n                  })\n                })]\n              })\n            })]\n          })\n        })]\n      });\n    });\n  }\n\n  return _jsxs(NativeBaseProvider, {\n    children: [_jsx(AppBar, {}), _jsxs(ImageBackground, {\n      imageStyle: {\n        opacity: 0.3\n      },\n      style: styles.image2,\n      source: require(\"../assets/images/splashbg2.png\"),\n      resizeMode: \"cover\",\n      children: [Spinner(), _jsxs(ScrollView, {\n        children: [_jsx(Divider, {}), _jsx(HistoryList, {})]\n      })]\n    })]\n  });\n}\n\nfunction AppBar() {\n  var navigation = useNavigation();\n  return _jsxs(_Fragment, {\n    children: [_jsx(Box, {\n      safeAreaTop: true,\n      backgroundColor: \"#f2f2f2\"\n    }), _jsxs(HStack, {\n      borderColor: \"gray.300\",\n      borderWidth: \"1\",\n      bg: \"amber.300\",\n      px: \"1\",\n      alignItems: \"center\",\n      children: [_jsx(HStack, {\n        space: \"4\",\n        alignItems: \"center\",\n        children: _jsx(Ionicons, {\n          name: \"md-chevron-back-sharp\",\n          size: 24,\n          color: \"black\",\n          onPress: function onPress() {\n            navigation.navigate('Root');\n          }\n        })\n      }), _jsx(HStack, {\n        bg: \"amber.300\",\n        py: \"2\",\n        px: \"1\",\n        children: _jsx(Center, {\n          children: _jsx(Heading, {\n            size: \"lg\",\n            color: \"black\",\n            children: \"History\"\n          })\n        })\n      })]\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  icon: {\n    color: 'black',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  balance: {\n    fontSize: 25,\n    width: '100%'\n  },\n  coin: {\n    width: 40,\n    resizeMode: 'contain',\n    height: 25,\n    marginTop: 5\n  },\n  coingif: {\n    size: '100%'\n  },\n  coingif: {\n    width: 10\n  },\n  image: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: 'gray'\n  },\n  image2: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  title: {\n    width: 400,\n    resizeMode: 'cover',\n    marginTop: -100,\n    marginBottom: -100,\n    margin: -100\n  },\n  header: {\n    marginTop: '15%',\n    marginLeft: '18%',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    backgroundColor: '#fff'\n  },\n  center: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});","map":{"version":3,"sources":["C:/Users/DavidWIlliams/Desktop/crewCoin/screens/HistoryScreen.js"],"names":["NativeBaseProvider","Center","Text","Box","Heading","Header","Divider","Stack","HStack","VStack","AspectRatio","Ionicons","ScrollView","posts","useNavigation","UserContext","Component","useContext","useEffect","useState","moment","SecureStore","HistoryScreen","route","navigation","isLoading","setIsLoading","Spinner","require","marginTop","width","height","justifyContent","alignItems","zIndex","top","resizeMode","HistoryList","value","setValue","token","setToken","getValueFor","key","getItemAsync","result","console","log","coin","cost","fetch","portalId","method","headers","authorization","credentials","Accept","mode","then","res","json","self","filter","user","username","Alert","alert","text","onPress","catch","err","newTransaction","_id","body","JSON","stringify","newStoreItem","newAnnouncement","success","crewuser","navigate","history","sort","a","b","Date","date","map","borderColor","backgroundColor","shadow","borderWidth","color","action","amount","who","comments","styles","format","opacity","image2","AppBar","StyleSheet","create","container","flex","icon","fontSize","fontWeight","balance","coingif","size","image","title","marginBottom","margin","header","marginLeft","center"],"mappings":"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","sourcesContent":["import { StyleSheet, ImageBackground, Image } from \"react-native\";\r\nimport { NativeBaseProvider, Center, Text, Box, Heading, Header, Divider, Stack, HStack, VStack, AspectRatio } from 'native-base';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { ScrollView } from \"react-native-gesture-handler\";\r\nimport posts from './sample2';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { UserContext } from \"./UserContext\";\r\nimport { Component, useContext, useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport * as SecureStore from 'expo-secure-store';\r\n\r\n\r\n\r\n\r\nexport default function HistoryScreen({ route, navigation }) {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    function Spinner() {\r\n        if (isLoading) {\r\n            return (\r\n                <Image alt=\"spinner\" source={require('../assets/images/genericspinner.gif')}\r\n                    style={{ marginTop: \"-34%\", width: '32%', height: '20%', justifyContent: \"center\", alignItems: \"center\", zIndex: 20000000, top: \"49%\", resizeMode: \"contain\" }} />\r\n            )\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function HistoryList() {\r\n        const { value, setValue } = useContext(UserContext);\r\n        const [token, setToken] = useState('');\r\n\r\n        async function getValueFor(key) {\r\n            let result = await SecureStore.getItemAsync(key);\r\n            if (result) {\r\n                setToken(result);\r\n            } else {\r\n                console.log('No values stored under that key.');\r\n            }\r\n        }\r\n        getValueFor('token');\r\n\r\n        function coin(cost) {\r\n            if (cost > 1) {\r\n                return (\r\n                    `${cost} Crew Coins`\r\n                )\r\n            } else {\r\n                return (\r\n                    `${cost} Crew Coin`\r\n                )\r\n            }\r\n        }\r\n\r\n        useEffect(() => {\r\n            fetch(`https://crewcoin.herokuapp.com/crewuser/${value.portalId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    authorization: \"jwt\",\r\n                    credentials: \"same-origin\",\r\n                    Accept: \"application/json\",\r\n                    \"Content-Type\": \"application/json\",\r\n                    mode: \"cors\"\r\n                },\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res) {\r\n                        let self = res.filter(user => user.username === value.username);\r\n                        setValue(self[0]);\r\n                        setIsLoading(false);\r\n                    } else {\r\n                        Alert.alert(\r\n                            \"Error\",\r\n                            \"Please check your internet connection\",\r\n                            [\r\n\r\n                                { text: \"OK\", onPress: () => console.log(\"OK Pressed\") }\r\n                            ]\r\n                        )\r\n                        setIsLoading(false);\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                }\r\n                );\r\n\r\n            // update alerts\r\n            if (value.newTransaction) {\r\n                fetch(`https://crewcoin.herokuapp.com/crewuser/alert/${value._id}`, {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                        //bearer token\r\n                        authorization: `bearer ${token}`,\r\n                        Accept: \"application/json\",\r\n                        \"Content-Type\": \"application/json\",\r\n                        mode: \"cors\"\r\n                    },\r\n                    body: JSON.stringify({\r\n                        \"newStoreItem\": value.newStoreItem,\r\n                        \"newTransaction\": false,\r\n                        \"newAnnouncement\": value.newAnnouncement,\r\n                    }),\r\n                })\r\n\r\n                    .then(res => res.json())\r\n                    .then(res => {\r\n                        if (res.success) {\r\n                            setValue(res.crewuser);\r\n                        } else {\r\n                            Alert.alert(\r\n                                `${err}`,\r\n                                \"Please check internet connection!\",\r\n                                [\r\n\r\n                                    { text: \"OK\", onPress: () => console.log(\"OK Pressed\") }\r\n                                ]\r\n                            )\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                        Alert.alert(\r\n                            \"Error\",\r\n                            \"Please login again\",\r\n                            [\r\n                                { text: \"OK\", onPress: () => console.log(\"OK Pressed\") }\r\n                            ]\r\n                        )\r\n                        navigation.navigate(\"Login\");\r\n                    });\r\n            }\r\n\r\n        }, []);\r\n\r\n\r\n        const history = value.history.sort(function (a, b) {\r\n            // Turn your strings into dates, and then subtract them\r\n            // to get a value that is either negative, positive, or zero.\r\n            return new Date(b.date) - new Date(a.date);\r\n        });\r\n        return (\r\n            history.map(posts => {\r\n                return (\r\n                    <Box\r\n                        shadow={2}\r\n                        mt=\"2\"\r\n                        mb=\"2\"\r\n\r\n                        maxW=\"100%\"\r\n                        rounded=\"lg\"\r\n                        overflow=\"hidden\"\r\n                        borderColor=\"gray.300\"\r\n                        borderWidth=\"1\"\r\n                        _dark={{\r\n                            borderColor: \"gray.900\",\r\n                            backgroundColor: \"gray.900\",\r\n                        }}\r\n                        _web={{\r\n                            shadow: 2,\r\n                            borderWidth: 0,\r\n                        }}\r\n                        _light={{\r\n                            backgroundColor: \"white\",\r\n                        }}\r\n                    >   <Center>\r\n                            <Stack w=\"350\" p=\"2\" mx=\"3\" space={3} maxW=\"95%\">\r\n                                <Stack maxW=\"95%\" space={2}>\r\n                                    <Center>\r\n                                        <Text\r\n\r\n                                            mt=\"-3\"\r\n                                            color=\"gray.900\"\r\n                                            _dark={{\r\n                                                color: \"warmGray.200\",\r\n                                            }}\r\n                                            fontWeight=\"500\"\r\n                                            fontSize={17}\r\n                                            bold=\"true\"\r\n                                            textAlign=\"center\"\r\n\r\n                                        >\r\n                                            {`${posts.action} ${coin(posts.amount)} ${posts.who}`}\r\n                                        </Text>\r\n                                        <Divider color=\"amber.600\" />\r\n                                    </Center>\r\n                                </Stack>\r\n                                <Stack maxW=\"100%\">\r\n                                    <VStack width=\"100%\">\r\n                                        <Center>\r\n                                            <Text\r\n                                                italic=\"true\"\r\n                                                mt=\"-3\"\r\n                                                color=\"gray.900\"\r\n                                                _dark={{\r\n                                                    color: \"warmGray.200\",\r\n                                                }}\r\n                                                fontWeight=\"500\"\r\n                                                fontSize={17}\r\n                                            >\r\n                                                Comments:\r\n                                            </Text>\r\n                                            <Text\r\n                                                textAlign=\"center\"\r\n                                                color=\"gray.900\"\r\n                                                _dark={{\r\n                                                    color: \"warmGray.200\",\r\n                                                }}\r\n                                                fontWeight=\"400\"\r\n                                                fontSize=\"lg\"\r\n                                                italic=\"true\"\r\n                                                bold=\"true\"\r\n                                            >\r\n                                                \"{`${posts.comments}`}\"\r\n                                            </Text>\r\n                                        </Center>\r\n                                        <Divider />\r\n                                        <Center>\r\n                                            <HStack >\r\n                                                <Image style={styles.coin} source={require('../assets/images/coinIcon2.gif')} />\r\n                                                <Heading\r\n                                                    mt=\"2\"\r\n                                                    color=\"yellow.600\"\r\n                                                    _dark={{\r\n                                                        color: \"warmGray.200\",\r\n                                                    }}\r\n                                                    fontWeight=\"600\"\r\n                                                    fontSize=\"md\"\r\n                                                >\r\n                                                    Posted: {moment(posts.date).format(\"MM/DD/YYYY h:mma\")}\r\n                                                </Heading>\r\n\r\n                                            </HStack>\r\n                                        </Center>\r\n                                    </VStack>\r\n                                </Stack>\r\n                            </Stack>\r\n                        </Center>\r\n                    </Box>\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <NativeBaseProvider>\r\n            <AppBar />\r\n            <ImageBackground imageStyle=\r\n                {{ opacity: 0.3 }} style={styles.image2} source={require('../assets/images/splashbg2.png')} resizeMode=\"cover\" >\r\n                {Spinner()}\r\n                <ScrollView>\r\n                    <Divider />\r\n                    <HistoryList />\r\n                </ScrollView>\r\n            </ImageBackground>\r\n        </NativeBaseProvider>\r\n    );\r\n}\r\n\r\nfunction AppBar() {\r\n    const navigation = useNavigation();\r\n    return (\r\n        <>\r\n            <Box safeAreaTop backgroundColor=\"#f2f2f2\" />\r\n            <HStack borderColor=\"gray.300\"\r\n                borderWidth=\"1\" bg='amber.300' px=\"1\" alignItems='center'>\r\n                <HStack space=\"4\" alignItems='center'>\r\n                    <Ionicons name=\"md-chevron-back-sharp\" size={24} color=\"black\" onPress={() => { navigation.navigate('Root'); }} />\r\n                </HStack>\r\n\r\n\r\n                <HStack bg='amber.300' py=\"2\" px=\"1\">\r\n                    <Center><Heading size=\"lg\" color=\"black\">History</Heading></Center>\r\n                </HStack>\r\n            </HStack>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    icon: {\r\n        color: 'black',\r\n        fontSize: 16,\r\n        fontWeight: 'bold',\r\n\r\n\r\n    },\r\n    balance: {\r\n        fontSize: 25,\r\n        width: '100%',\r\n    },\r\n    coin: {\r\n        width: 40,\r\n        resizeMode: 'contain',\r\n        height: 25,\r\n        marginTop: 5,\r\n    },\r\n    coingif: {\r\n        size: '100%',\r\n    },\r\n    coingif: {\r\n        width: 10,\r\n    },\r\n    image: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        backgroundColor: 'gray',\r\n    },\r\n    image2: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    title: {\r\n        width: 400,\r\n        resizeMode: 'cover',\r\n        marginTop: -100,\r\n        marginBottom: -100,\r\n        margin: -100,\r\n    },\r\n    header: {\r\n        marginTop: '15%',\r\n        marginLeft: '18%',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'flex-start',\r\n        backgroundColor: '#fff',\r\n    },\r\n    center: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n});"]},"metadata":{},"sourceType":"module"}