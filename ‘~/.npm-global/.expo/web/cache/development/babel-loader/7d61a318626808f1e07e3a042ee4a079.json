{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport * as Font from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport React from \"react\";\nexport function useLoadedAssets() {\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isLoadingComplete = _React$useState2[0],\n    setLoadingComplete = _React$useState2[1];\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _loadResourcesAndDataAsync.apply(this, arguments);\n    }\n    function _loadResourcesAndDataAsync() {\n      _loadResourcesAndDataAsync = _asyncToGenerator(function* () {\n        try {\n          SplashScreen.preventAutoHideAsync();\n\n          yield Font.loadAsync(Ionicons.font);\n        } catch (e) {\n          console.warn(e);\n        } finally {\n          setLoadingComplete(true);\n          SplashScreen.preventAutoHideAsync();\n          setTimeout(function () {\n            SplashScreen.hideAsync();\n          }, 3000);\n        }\n      });\n      return _loadResourcesAndDataAsync.apply(this, arguments);\n    }\n    loadResourcesAndDataAsync();\n  }, []);\n  return isLoadingComplete;\n}","map":{"version":3,"names":["Ionicons","Font","SplashScreen","React","useLoadedAssets","useState","isLoadingComplete","setLoadingComplete","useEffect","loadResourcesAndDataAsync","preventAutoHideAsync","loadAsync","font","e","console","warn","setTimeout","hideAsync"],"sources":["C:/Users/DavidWIlliams/Desktop/crewCoin/hooks/useLoadedAssets.js"],"sourcesContent":["import Ionicons from \"@expo/vector-icons/Ionicons\";\nimport * as Font from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport React from \"react\";\n\nexport function useLoadedAssets() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync(Ionicons.font);\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        \n        setLoadingComplete(true);\n        SplashScreen.preventAutoHideAsync()\n        setTimeout(() => {\n        SplashScreen.hideAsync()\n        }, 3000);\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,6BAA6B;AAClD,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,OAAO,KAAKC,YAAY,MAAM,oBAAoB;AAClD,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,SAASC,eAAe,GAAG;EAChC,sBAAgDD,KAAK,CAACE,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA9DC,iBAAiB;IAAEC,kBAAkB;;EAG5CJ,KAAK,CAACK,SAAS,CAAC,YAAM;IAAA,SACLC,yBAAyB;MAAA;IAAA;IAAA;MAAA,+CAAxC,aAA2C;QACzC,IAAI;UACFP,YAAY,CAACQ,oBAAoB,EAAE;;UAGnC,MAAMT,IAAI,CAACU,SAAS,CAACX,QAAQ,CAACY,IAAI,CAAC;QACrC,CAAC,CAAC,OAAOC,CAAC,EAAE;UAEVC,OAAO,CAACC,IAAI,CAACF,CAAC,CAAC;QACjB,CAAC,SAAS;UAERN,kBAAkB,CAAC,IAAI,CAAC;UACxBL,YAAY,CAACQ,oBAAoB,EAAE;UACnCM,UAAU,CAAC,YAAM;YACjBd,YAAY,CAACe,SAAS,EAAE;UACxB,CAAC,EAAE,IAAI,CAAC;QACV;MACF,CAAC;MAAA;IAAA;IAEDR,yBAAyB,EAAE;EAC7B,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOH,iBAAiB;AAC1B"},"metadata":{},"sourceType":"module"}