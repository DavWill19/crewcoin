{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/mzatorski/Projects/react-native-text/src/index.tsx\";\nimport React, { useMemo } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width,\n  height = _Dimensions$get.height;\nvar DEVICE_BASE_WIDTH = 375;\nvar FONT_SIZE = 14;\nvar REAL_WIDTH = height > width ? width : height;\nexport var scaleText = function scaleText(_ref) {\n  var _ref$deviceBaseWidth = _ref.deviceBaseWidth,\n    deviceBaseWidth = _ref$deviceBaseWidth === void 0 ? DEVICE_BASE_WIDTH : _ref$deviceBaseWidth,\n    _ref$fontSize = _ref.fontSize,\n    fontSize = _ref$fontSize === void 0 ? FONT_SIZE : _ref$fontSize,\n    _ref$lineHeight = _ref.lineHeight,\n    lineHeight = _ref$lineHeight === void 0 ? fontSize * 1.2 : _ref$lineHeight;\n  return {\n    fontSize: Math.round(fontSize * REAL_WIDTH / deviceBaseWidth),\n    lineHeight: Math.round(lineHeight * REAL_WIDTH / deviceBaseWidth)\n  };\n};\nexport var useScaleText = function useScaleText(_ref2) {\n  var _ref2$deviceBaseWidth = _ref2.deviceBaseWidth,\n    deviceBaseWidth = _ref2$deviceBaseWidth === void 0 ? DEVICE_BASE_WIDTH : _ref2$deviceBaseWidth,\n    _ref2$fontSize = _ref2.fontSize,\n    fontSize = _ref2$fontSize === void 0 ? FONT_SIZE : _ref2$fontSize,\n    _ref2$lineHeight = _ref2.lineHeight,\n    lineHeight = _ref2$lineHeight === void 0 ? fontSize * 1.2 : _ref2$lineHeight;\n  return useMemo(function () {\n    return {\n      fontSize: Math.round(fontSize * REAL_WIDTH / deviceBaseWidth),\n      lineHeight: Math.round(lineHeight * REAL_WIDTH / deviceBaseWidth)\n    };\n  }, [deviceBaseWidth, fontSize, lineHeight]);\n};\nvar ScalableText = function ScalableText(_ref3) {\n  var deviceBaseWidth = _ref3.deviceBaseWidth,\n    _ref3$style = _ref3.style,\n    style = _ref3$style === void 0 ? {} : _ref3$style,\n    children = _ref3.children,\n    props = _objectWithoutProperties(_ref3, [\"deviceBaseWidth\", \"style\", \"children\"]);\n  var _StyleSheet$flatten = StyleSheet.flatten(style),\n    fontSize = _StyleSheet$flatten.fontSize,\n    lineHeight = _StyleSheet$flatten.lineHeight;\n  var _useScaleText = useScaleText({\n      deviceBaseWidth: deviceBaseWidth,\n      fontSize: fontSize,\n      lineHeight: lineHeight\n    }),\n    scaledText = _extends({}, _useScaleText);\n  return React.createElement(Text, _extends({\n    style: StyleSheet.flatten([style, scaledText])\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    }\n  }), children);\n};\nexport default ScalableText;","map":{"version":3,"sources":["index.tsx"],"names":["React","useMemo","width","height","Dimensions","get","DEVICE_BASE_WIDTH","FONT_SIZE","REAL_WIDTH","scaleText","deviceBaseWidth","fontSize","lineHeight","Math","round","useScaleText","ScalableText","style","children","props","StyleSheet","flatten","scaledText"],"mappings":";;;AAAA,OAAOA,KAAP,IAAmCC,OAAnC,QAAkD,OAAlD;AACA;AAAA;AAAA;sBAE0BG,UAAU,CAACC,GAAXD,CAAe,QAAfA,C;EAAlBF,K,mBAAAA,K;EAAOC,M,mBAAAA,M;AAEf,IAAMG,iBAAiB,GAAG,GAA1B;AACA,IAAMC,SAAS,GAAG,EAAlB;AACA,IAAMC,UAAU,GAAGL,MAAM,GAAGD,KAATC,GAAiBD,KAAjBC,GAAyBA,MAA5C;AASA,OAAO,IAAMM,SAAS,GAATA,SAAAA,SAAY,CAAA,IAAA,EAIR;EAAA,IAAA,oBAAA,GAAA,IAAA,CAHfC,eAGe;IAHfA,eAGe,GAAA,oBAAA,KAAA,KAAA,CAAA,GAHGJ,iBAGH,GAAA,oBAAA;IAAA,aAAA,GAAA,IAAA,CAFfK,QAEe;IAFfA,QAEe,GAAA,aAAA,KAAA,KAAA,CAAA,GAFJJ,SAEI,GAAA,aAAA;IAAA,eAAA,GAAA,IAAA,CADfK,UACe;IADfA,UACe,GAAA,eAAA,KAAA,KAAA,CAAA,GADFD,QAAQ,GAAG,GACT,GAAA,eAAA;EACf,OAAO;IACLA,QAAQ,EAAEE,IAAI,CAACC,KAALD,CAAYF,QAAQ,GAAGH,UAAZ,GAA0BE,eAArCG,CADL;IAELD,UAAU,EAAEC,IAAI,CAACC,KAALD,CAAYD,UAAU,GAAGJ,UAAd,GAA4BE,eAAvCG;EAFP,CAAP;AAID,CATM;AAWP,OAAO,IAAME,YAAY,GAAZA,SAAAA,YAAe,CAAA,KAAA,EAIX;EAAA,IAAA,qBAAA,GAAA,KAAA,CAHfL,eAGe;IAHfA,eAGe,GAAA,qBAAA,KAAA,KAAA,CAAA,GAHGJ,iBAGH,GAAA,qBAAA;IAAA,cAAA,GAAA,KAAA,CAFfK,QAEe;IAFfA,QAEe,GAAA,cAAA,KAAA,KAAA,CAAA,GAFJJ,SAEI,GAAA,cAAA;IAAA,gBAAA,GAAA,KAAA,CADfK,UACe;IADfA,UACe,GAAA,gBAAA,KAAA,KAAA,CAAA,GADFD,QAAQ,GAAG,GACT,GAAA,gBAAA;EACf,OAAOV,OAAO,CAAC,YAAM;IACnB,OAAO;MACLU,QAAQ,EAAEE,IAAI,CAACC,KAALD,CAAYF,QAAQ,GAAGH,UAAZ,GAA0BE,eAArCG,CADL;MAELD,UAAU,EAAEC,IAAI,CAACC,KAALD,CAAYD,UAAU,GAAGJ,UAAd,GAA4BE,eAAvCG;IAFP,CAAP;EAID,CALa,EAKX,CAACH,eAAD,EAAkBC,QAAlB,EAA4BC,UAA5B,CALW,CAAd;AAMD,CAXM;AAkBP,IAAMI,YAAsC,GAAtCA,SAAAA,YAAyC,CAAA,KAAA,EAKzC;EAJJN,IAAAA,eAII,GAAA,KAAA,CAJJA,eAII;IAAA,WAAA,GAAA,KAAA,CAHJO,KAGI;IAHJA,KAGI,GAAA,WAAA,KAAA,KAAA,CAAA,GAHI,CAAA,CAGJ,GAAA,WAAA;IAFJC,QAEI,GAAA,KAAA,CAFJA,QAEI;IADDC,KACC,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,iBAAA,EAAA,OAAA,EAAA,UAAA,CAAA,CAAA;EAAA,IAAA,mBAAA,GAC6BC,UAAU,CAACC,OAAXD,CAAmBH,KAAnBG,CAD7B;IACIT,QADJ,GAAA,mBAAA,CACIA,QADJ;IACcC,UADd,GAAA,mBAAA,CACcA,UADd;EAAA,IAAA,aAAA,GAEsBG,YAAY,CAAC;MAAEL,eAAe,EAAfA,eAAF;MAAmBC,QAAQ,EAARA,QAAnB;MAA6BC,UAAU,EAAVA;IAA7B,CAAD,CAFlC;IAEOU,UAFP,GAAA,QAAA,CAAA,CAAA,CAAA,EAAA,aAAA,CAAA;EAIJ,OACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA,QAAA,CAAA;IAAM,KAAK,EAAEF,UAAU,CAACC,OAAXD,CAAmB,CAACH,KAAD,EAAQK,UAAR,CAAnBF;EAAb,CAAA,EAA0DD,KAA1D,EAAA;IAAA,QAAA,EAAA;MAAA,QAAA,EAAA,YAAA;MAAA,UAAA,EAAA;IAAA;EAAA,CAAA,CAAA,EACGD,QADH,CADF;AAKD,CAdD;AAgBA,eAAeF,YAAf","sourcesContent":["import React, { FunctionComponent, useMemo } from 'react';\nimport { Dimensions, Text, StyleSheet, TextStyle, TextProps } from 'react-native';\n\nconst { width, height } = Dimensions.get('window');\n\nconst DEVICE_BASE_WIDTH = 375; // iPhone 6 width\nconst FONT_SIZE = 14;\nconst REAL_WIDTH = height > width ? width : height;\n\ntype ScaleText = {\n  deviceBaseWidth?: number;\n  fontSize?: number;\n  lineHeight?: number;\n  realWidth?: number;\n};\n\nexport const scaleText = ({\n  deviceBaseWidth = DEVICE_BASE_WIDTH,\n  fontSize = FONT_SIZE,\n  lineHeight = fontSize * 1.2, // Default line height is 120% of the font size.\n}: ScaleText) => {\n  return {\n    fontSize: Math.round((fontSize * REAL_WIDTH) / deviceBaseWidth),\n    lineHeight: Math.round((lineHeight * REAL_WIDTH) / deviceBaseWidth),\n  };\n};\n\nexport const useScaleText = ({\n  deviceBaseWidth = DEVICE_BASE_WIDTH,\n  fontSize = FONT_SIZE,\n  lineHeight = fontSize * 1.2, // Default line height is 120% of the font size.\n}: ScaleText) => {\n  return useMemo(() => {\n    return {\n      fontSize: Math.round((fontSize * REAL_WIDTH) / deviceBaseWidth),\n      lineHeight: Math.round((lineHeight * REAL_WIDTH) / deviceBaseWidth),\n    };\n  }, [deviceBaseWidth, fontSize, lineHeight]);\n};\n\ninterface Props extends TextProps {\n  deviceBaseWidth?: number;\n  style?: TextStyle;\n}\n\nconst ScalableText: FunctionComponent<Props> = ({\n  deviceBaseWidth,\n  style = {},\n  children,\n  ...props\n}) => {\n  const { fontSize, lineHeight } = StyleSheet.flatten(style);\n  const { ...scaledText } = useScaleText({ deviceBaseWidth, fontSize, lineHeight });\n\n  return (\n    <Text style={StyleSheet.flatten([style, scaledText])} {...props}>\n      {children}\n    </Text>\n  );\n};\n\nexport default ScalableText;\n"]},"metadata":{},"sourceType":"module"}